@inject ServiceBase<RequirementLanguage> RequirementLanguageService

<STZEntityField TItem="Language" PropertyName="Name"
                Label="General.Language" SelectedItemChanged="OnChangeLanguage"/>

<div class="mt-4">
    <MarkdownEditor @ref="_markDown"
                    @bind-Value="@_markdownValue"
                    ValueHTMLChanged="@OnMarkdownValueHTMLChanged"
                    SpellChecker="false"/>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSave" Disabled="@(!_savePending)">
        <STZText Key="General.Save"/>
    </MudButton>
</div>

@code {
    [Parameter] public Requirement Requirement { get; set; }

    private MarkdownEditor _markDown;
    private string _markdownValue;
    private string _htmlValue;
    private Language? _langSelected;
    private bool _savePending;
    private RequirementLanguage _reqLang;

    private async Task OnChangeLanguage(Language lang)
    {
        _langSelected = lang;
        _reqLang = await GetRequirementLanguage();
        _markdownValue = _reqLang.Markdown;
        await _markDown.SetValueAsync(_markdownValue);
        _savePending = false;
    }

    private Task OnMarkdownValueHTMLChanged(string value)
    {
        if (_reqLang is null) return Task.CompletedTask;
        
        if (!_reqLang.Html.Equals(value)) _savePending = true;
        _htmlValue = value;
        
        return Task.CompletedTask;
    }

    private async Task OnSave()
    {
        _reqLang.Markdown = await _markDown.GetValueAsync();
        _reqLang.Html = _htmlValue;

        if (_reqLang.RequirementId == Guid.Empty || _reqLang.LanguageId == Guid.Empty)
        {
            _reqLang.RequirementId = Requirement.Id;
            _reqLang.LanguageId = _langSelected!.Id;
            await RequirementLanguageService.AddAsync(_reqLang);
        }
        else
        {
            await RequirementLanguageService.UpdateAsync(_reqLang.Id.ToString(), _reqLang);
        }

        _reqLang = await GetRequirementLanguage();
        _savePending = false;
    }

    private async Task<RequirementLanguage> GetRequirementLanguage()
    {
        var reqLangs =
            await RequirementLanguageService
                .FindAsync($"LanguageId = Guid(\"{_langSelected!.Id.ToString()}\") && RequirementId = Guid(\"{Requirement.Id.ToString()}\")");

        return reqLangs.Any() ? reqLangs.Single() : new RequirementLanguage();
    }

}