@page "/RegulationCompanies"
@using CISO.AuditService.Shared.Entities
@using CISO.CertificationService.Shared.Entities
@using STZ.Frontend.Dialogs
@using STZ.Frontend.Services
@using STZ.Shared.Bases
@using STZ.Shared.Entities
@attribute [STZAuthorize("RegulationCompanies")]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ServiceBase<User> UserService
@inject ServiceBase<Company> CompanyService
@inject ServiceBase<Regulation> RegulationService
@inject ServiceBase<RegulationCompany> RegulationCompanyService
@inject IDialogService DialogService
@inject LocalizationService Localization
@inject ISnackbar Snackbar


@if (_company is null)
{
    <STZText Key="General.UserWithoutCompany"/>
}
else
{
    <MudStack>
        <STZToolbarTitle Title="@_company.Name"/>
        <STZToolbarTitle Title="General.AssociatedRegulations" AddComponentType="typeof(Add)" OnClick="OnAdd"/>
        <MudDataGrid T="RegulationCompanyDto" Items="_regulationCompanies">
            <Columns>
                <TemplateColumn>
                    <HeaderTemplate>
                        <STZText Key="General.Actions"/>
                    </HeaderTemplate>
                    <CellTemplate Context="context">
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Delete"
                                       OnClick="@(() => OnDelete(context!.Item))"/>
                    </CellTemplate>
                </TemplateColumn>

                <STZColumn T="RegulationCompanyDto" TProperty="string" Property="x => x.RegulationName"
                           Title="General.Regulation"></STZColumn>
                <STZColumn T="RegulationCompanyDto" TProperty="string" Property="x => x.UserName"
                           Title="General.Responsable"></STZColumn>
            </Columns>
        </MudDataGrid>
    </MudStack>
}

@code {
    private string? _userEmail;
    private User? _user;
    private Company? _company;
    private List<RegulationCompanyDto> _regulationCompanies = [];

    public class RegulationCompanyDto
    {
        public RegulationCompany Item;
        public string? RegulationName { get; set; }
        public string? UserName { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            _userEmail = user.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value ??
                         throw new InvalidOperationException("User email not found");
        }

        var response = await UserService.FindAsync($"Email = \"{_userEmail}\"");
        _user = response.SingleOrDefault() ?? throw new InvalidOperationException("User not found");
        _company = await CompanyService.GetByIdAsync(_user.CompanyId.ToString());
        if (_company is null) return;

        await GetRegulationCompanies();
    }

    private async Task GetRegulationCompanies()
    {
        if (_company is null) return;
        _regulationCompanies.Clear();
        var regulationCompanies = await RegulationCompanyService.FindAsync($"CompanyId = Guid(\"{_company.Id.ToString()}\")");
        if (!regulationCompanies.Any()) return;

        foreach (var item in regulationCompanies)
        {
            var regulation = await RegulationService.GetByIdAsync(item.RegulationId.ToString());
            var responsable = await UserService.GetByIdAsync(item.UserResponsibleId.ToString());
            if (regulation is null) continue;
            if (responsable is null) continue;

            var regulationCompany = new RegulationCompanyDto
            {
                Item = item,
                RegulationName = regulation.Name,
                UserName = $"{responsable.FullName}"
            };

            _regulationCompanies.Add(regulationCompany);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnAdd()
    {
        var item = new RegulationCompany();
        await ShowDialog(Localization.Get("General.AddSection"), typeof(Add),
            new Dictionary<string, object> { { "Item", item } },
            async result =>
            {
                if (!result.Canceled)
                {
                    var newItem = (RegulationCompany)result.Data!;
                    newItem.CompanyId = _company!.Id;
                    await RegulationCompanyService.AddAsync(newItem);
                    Snackbar.Add(Localization.Get("General.RegisterAdded"), Severity.Success);
                    await GetRegulationCompanies();
                }
            });
    }

    private async Task OnDelete(RegulationCompanyDto item)
    {
        var parameters = new DialogParameters<DeleteDialog>
        {
            { x => x.ContentText, Localization.Get("General.Confirmation") },
            { x => x.ButtonText, Localization.Get("General.Delete") },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<DeleteDialog>("Eliminar", parameters, options);
        var result = await dialog.Result;

        if (result?.Canceled == true)
        {
            Snackbar.Add(Localization.Get("General.Deleted.Canceled"), Severity.Info);
        }
        else
        {
            await RegulationCompanyService.DeleteAsync(item.Item.Id);
            Snackbar.Add(Localization.Get("General.RegisterDeleted"), Severity.Success);
            await GetRegulationCompanies();
        }
    }

    private async Task ShowDialog(string title, Type componentType, Dictionary<string, object> parameters, Func<DialogResult, Task>? onResult = null)
    {
        var dialogParameters = new DialogParameters
        {
            ["ComponentType"] = componentType,
            ["ComponentParameters"] = parameters
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<DataGridTemplateDialog>(title, dialogParameters, options);
        var result = await dialog.Result;

        if (onResult != null)
        {
            await onResult(result);
        }
    }

}