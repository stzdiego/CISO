@using STZ.Frontend.Services
@using STZ.Shared.Bases
@using STZ.Shared.Entities
@using CISO.Frontend.Theme
@inherits LayoutComponentBase
@inject ServiceBase<Culture> CultureService
@inject LocalizationService LocalizationService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<MudThemeProvider Theme="@Theme.ResourcesTheme" />
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                       OnClick="@((e) => DrawerToggle())"/>
        <MudText Typo="Typo.h6"><STZText Key="App.Name" /></MudText>
        <MudSpacer />
        <MudStack Row>
            <MudSelect T="Guid" 
                       Variant="Variant.Outlined" 
                       Style="width: 5rem" 
                       ValueChanged="ChangeCulture"
                       Value="_currentCultureId">
                @foreach (var culture in _cultures)
                {
                    <MudSelectItem T="Guid" Value="culture.Id">
                        @culture.Code
                    </MudSelectItem>
                }
            </MudSelect>
            <MudButton OnClick="Login">
                <STZText Key="App.Login" />
            </MudButton>
        </MudStack>
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen" Elevation="2" Variant="@DrawerVariant.Mini"
               OpenMiniOnHover="true">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private List<Culture> _cultures = [];
    private Guid _currentCultureId;

    protected override async Task OnInitializedAsync()
    {
        _cultures = await CultureService.GetAllAsync();

        var savedCultureId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "selectedCultureId");
        if (!string.IsNullOrEmpty(savedCultureId) && Guid.TryParse(savedCultureId, out var cultureId))
        {
            _currentCultureId = cultureId;
            await LocalizationService.SetCultureAsync(cultureId);
        }
        else
        {
            _currentCultureId = _cultures.Any() ? _cultures.First().Id : Guid.Empty;
        }
        
        await LocalizationService.SetCultureAsync(_currentCultureId);
        StateHasChanged();
        await base.OnInitializedAsync();
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    
    private async Task ChangeCulture(Guid id)
    {
        await LocalizationService.SetCultureAsync(id);
        _currentCultureId = id;
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "selectedCultureId", id.ToString());
    }

    private void Login()
    {
        Navigation.NavigateTo("authentication/login", forceLoad: true);
    }

    private void Logout()
    {
        Navigation.NavigateTo("authentication/logout");
    }
}