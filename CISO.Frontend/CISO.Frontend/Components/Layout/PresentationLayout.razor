@using CISO.Frontend.Theme
@using STZ.Frontend.Services
@using STZ.Shared.Bases
@using STZ.Shared.Entities
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject ServiceBase<Culture> CultureService
@inject LocalizationService Localization
@inject IJSRuntime JsRuntime

<MudThemeProvider Theme="@Theme.ResourcesTheme"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout Class="full-height">
    <MudAppBar Elevation="1">
        <STZAuthorizeView>
            <MudButton OnClick="GoDashboard"
                       Style="color: white; border-color: white"
                       Variant="Variant.Outlined">
                <STZText Key="General.Dashboard"/>
            </MudButton>
        </STZAuthorizeView>
        <MudSpacer/>
        <STZAuthorizeView>
            <Authorized>
                <MudButton OnClick="GoLogout"
                           Style="color: white; border-color: white"
                           Variant="Variant.Outlined">
                    <STZText Key="App.Logout"/>
                </MudButton>
            </Authorized>
            <NotAuthorized>
                <MudButton OnClick="GoLogin"
                           Style="color: white; border-color: white"
                           Variant="Variant.Outlined">
                    <STZText Key="App.Login"/>
                </MudButton>
            </NotAuthorized>
        </STZAuthorizeView>
    </MudAppBar>

    <MudMainContent Class="content">
        <MudContainer MaxWidth="MaxWidth.Large">
            @Body
        </MudContainer>
    </MudMainContent>

    <div class="footer">
        <MudContainer>
            <MudGrid>
                <MudItem sm="6">
                    <MudText Typo="Typo.caption">
                        <p>
                            <STZText Key="General.Cultures"/>
                        </p>
                    </MudText>
                    <MudStack Spacing="0">
                        @foreach (var culture in _cultures)
                        {
                            <MudLink Typo="Typo.body2"
                                     OnClick="@(() => ChangeCulture(culture.Id))">@culture.Name</MudLink>
                        }
                    </MudStack>
                </MudItem>
            </MudGrid>
            <MudText Typo="Typo.body2" Align="Align.Center">
                <STZText Key="App.Footer.Text"/>
            </MudText>
        </MudContainer>
    </div>
</MudLayout>

<style>
    .full-height {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }

    .content {
        flex: 1;
    }

    .footer {
        background-color: lightgray;
        margin-top: auto;
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
    }
</style>

@code
{
    private List<Culture> _cultures = [];
    private Guid _currentCultureId;
    private bool _isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        _cultures = await CultureService.GetAllAsync();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isInitialized)
        {
            _currentCultureId = await GetCultureFromStorageAsync();
            
            if (_currentCultureId == Guid.Empty && _cultures.Any())
            {
                _currentCultureId = _cultures.First().Id;
                await SaveCultureInStorage(_currentCultureId);
            }
            
            await Localization.SetCultureAsync(_currentCultureId);
            _isInitialized = true;
            StateHasChanged(); // Forzar renderizado despuÃ©s de establecer la cultura
        }
    }

    private void GoLogin()
    {
        Navigation.NavigateTo($"/authentication/login?redirectUri=/dashboard", forceLoad: true);
    }

    private void GoLogout()
    {
        Navigation.NavigateTo("/authentication/logout", forceLoad: true);
    }

    private void GoDashboard()
    {
        Navigation.NavigateTo("/dashboard");
    }

    private async Task ChangeCulture(Guid cultureId)
    {
        var culture = _cultures.FirstOrDefault(c => c.Id == cultureId);
        if (culture != null)
        {
            _currentCultureId = cultureId;
            await Localization.SetCultureAsync(cultureId);
            await SaveCultureInStorage(cultureId);
        }
    }

    private async Task<Guid> GetCultureFromStorageAsync()
    {
        var saved = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "selectedCultureId");
        return Guid.TryParse(saved, out var cultureId) ? cultureId : Guid.Empty;
    }

    private async Task SaveCultureInStorage(Guid cultureId)
    {
        await JsRuntime.InvokeVoidAsync("localStorage.setItem", "selectedCultureId", cultureId.ToString());
    }
}